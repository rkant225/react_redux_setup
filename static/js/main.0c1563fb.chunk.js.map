{"version":3,"sources":["Components/ReduxTollKitComponents/LoaderReduxToolkit/LoaderReduxToolkit.js","ReduxToolkit/Slices/activeCustomersSlice.js","Components/ReduxTollKitComponents/FoodCourt/ActiveCustomer/ActiveCustomer.js","ReduxToolkit/Slices/reservationSlice.js","Components/ReduxTollKitComponents/FoodCourt/Reservation/Reservation.js","Components/ReduxTollKitComponents/FoodCourt/FoodCourt.js","ReduxToolkit/Slices/loaderSlice.js","ReduxToolkit/Slices/toasterSlice.js","ReduxToolkit/API/callAPI.js","ReduxToolkit/Slices/usersSlice.js","Components/ReduxTollKitComponents/RandomUser/RandomUser.js","Components/ReduxTollKitComponents/ToastSnackBar/ToastSnackBar.js","ReduxToolkit/Slices/postsSlice.js","Components/ReduxTollKitComponents/Posts/EditPostModal.js","Components/ReduxTollKitComponents/Posts/Post.js","Components/ReduxTollKitComponents/Posts/Posts.js","AppReduxToolkit.js","ReduxToolkit/store.js","index.js"],"names":["LoaderReduxToolkit","isLoading","useSelector","state","loaderModel","style","top","bottom","right","left","display","justifyContent","alignItems","position","backgroundColor","color","overflow","initialState","activeCustomers","reservationId","customerName","reservationDate","memberCount","foodOrders","orderId","Math","random","name","price","ceil","activeCustomersSlice","createSlice","reducers","addActiveCustomer","action","push","payload","deleteActiveCustomer","filteredActiveCustomersList","filter","activeCustomer","addFoodOrder","orderData","finalActiveCustomersList","forEach","deleteFoodOrder","filteredFoodOrders","foodOrder","actions","ActiveCustomer","dispatch","useDispatch","height","borderRadius","padding","map","marginBottom","fontWeight","cursor","onClick","reduce","acc","index","completeArray","flexWrap","width","margin","id","onSubmit","e","preventDefault","formElement","document","getElementById","food","FormData","get","Date","now","reset","handleAddFoodFormSubmission","textAlign","marginTop","required","type","value","reservationSlice","reservations","addReservation","deleteReservation","filteredReservationsList","reservation","Reservation","deleteCustomerReservation","reservationData","toDateString","FoodCourt","className","loaderSlice","startLoading","stopLoading","isError","message","changeId","toasterSlice","toastErrorMessage","toastSuccessMessage","makeApiCall","requestConfig","a","axios","baseURL","headers","Authorization","response","console","log","data","callAPI","uiLoaderAndToastMessageConfig","thunkAPI","displayAsError","error","fetchRandomUsers","createAsyncThunk","nUsers","URL","method","url","results","usersSlice","users","extraReducers","fulfilled","RandomUser","useState","userCount","setUserCount","user","src","picture","large","alt","email","ToastSnackBar","toasterModel","useEffect","toast","dismiss","success","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","limit","fetchAllPosts","updatePost","postsSlice","posts","selectedPost","updateSelectedPost","updatedPosts","post","EditPostModal","props","onClose","onSave","postsModel","title","setTitle","body","setBody","form","formData","onChange","target","Post","Posts","openEditPostModal","setOpenEditPostModal","closeEditModal","paddingTop","borderTop","postData","savePostData","AppReduxToolkit","store","configureStore","reducer","reservationReducer","activeCustomersReducer","usersReducer","loaderReducer","toasterReducer","postsReducer","ReactDOM","render"],"mappings":"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","file":"static/js/main.0c1563fb.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst LoaderReduxToolkit = () => {\r\n\r\n    const isLoading = useSelector((state)=>state.loaderModel.isLoading)\r\n\r\n    return (\r\n        <>\r\n            {isLoading &&\r\n                <div style={{top : '0', bottom : '0', right : '0', left : '0', display : 'flex', justifyContent : 'center', alignItems : 'center', position : 'fixed', backgroundColor : 'rgba(50,50,50,.8)', color : 'white', overflow : 'hidden'}}>\r\n                    Loading...\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default LoaderReduxToolkit;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    activeCustomers : [{\r\n        reservationId : 1635389718481,\r\n        customerName: \"Abhinav Singh\",\r\n        reservationDate: \"Thu Oct 28 2021\",\r\n        memberCount: 2,\r\n        foodOrders : [{orderId : Math.random(), name : 'Rice', price : Math.ceil(Math.random() * 100)}, {orderId : Math.random(), name : 'Chicken Curry', price : Math.ceil(Math.random() * 100)}]\r\n    }]\r\n}\r\n\r\nconst activeCustomersSlice = createSlice({\r\n    name : 'activeCustomers',\r\n    initialState : initialState,\r\n    reducers : {\r\n        addActiveCustomer : (state, action)=>{\r\n            state.activeCustomers.push({...action.payload, foodOrders : []});\r\n        },\r\n        deleteActiveCustomer : (state, action)=>{\r\n            const filteredActiveCustomersList = state.activeCustomers.filter((activeCustomer)=>activeCustomer.reservationId !== action.payload)\r\n            state.activeCustomers = filteredActiveCustomersList;\r\n        },\r\n        addFoodOrder : (state, action)=>{\r\n            const {reservationId, orderData} = action.payload;\r\n\r\n            let finalActiveCustomersList = [];\r\n\r\n            state.activeCustomers.forEach((activeCustomer)=>{\r\n                if(activeCustomer.reservationId === reservationId){\r\n                    activeCustomer.foodOrders = [...activeCustomer.foodOrders, orderData];\r\n                }\r\n                finalActiveCustomersList.push(activeCustomer);\r\n            });\r\n            state.activeCustomers = finalActiveCustomersList;\r\n\r\n        },\r\n        deleteFoodOrder : (state, action)=>{\r\n            const {reservationId, orderId} = action.payload;\r\n\r\n            let finalActiveCustomersList = [];\r\n\r\n            state.activeCustomers.forEach((activeCustomer)=>{\r\n                if(activeCustomer.reservationId === reservationId){\r\n                    const filteredFoodOrders = activeCustomer.foodOrders.filter((foodOrder)=>foodOrder.orderId !== orderId);\r\n                    activeCustomer.foodOrders = filteredFoodOrders;\r\n                }\r\n\r\n                finalActiveCustomersList.push(activeCustomer);\r\n            });\r\n\r\n            state.activeCustomers = finalActiveCustomersList;\r\n        },\r\n\r\n    }\r\n});\r\n\r\n\r\n//Action Creators\r\nexport const {addActiveCustomer, deleteActiveCustomer, addFoodOrder, deleteFoodOrder} = activeCustomersSlice.actions;\r\n\r\n// Reducer\r\nexport default activeCustomersSlice.reducer;","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {deleteActiveCustomer, addFoodOrder, deleteFoodOrder} from '../../../../ReduxToolkit/Slices/activeCustomersSlice';\r\n\r\nconst ActiveCustomer = () => {\r\n    const dispatch = useDispatch();\r\n    const activeCustomers = useSelector((state)=>state.activeCustomers.activeCustomers);\r\n\r\n\r\n    const handleAddFoodFormSubmission = (e, reservationId)=>{\r\n        e.preventDefault();\r\n        const formElement = document.getElementById(`add-order-form-${reservationId}`);\r\n        const formData = new FormData(formElement);\r\n        const food = formData.get('food');\r\n        const orderData = {orderId : Date.now(), name : food, price : Math.ceil(Math.random() * 100)}\r\n        dispatch(addFoodOrder({reservationId, orderData}))\r\n        formElement.reset();\r\n    }\r\n\r\n    const markReservationCompletedAndDelete = (reservationId)=>{\r\n        dispatch(deleteActiveCustomer(reservationId));\r\n    }\r\n\r\n    const deleteFoodFromOrder = (reservationId, orderId)=>{\r\n        dispatch(deleteFoodOrder({reservationId, orderId}));\r\n    }\r\n\r\n    const getOrderTotal = (foodOrders)=>{\r\n        return foodOrders.reduce((acc,foodOrder,index, completeArray)=>{\r\n            return acc + foodOrder.price;\r\n        },0)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div style={{backgroundColor : 'black', height : '500px', borderRadius : '.5rem', padding : '.5rem', overflow : 'auto'}}>\r\n\r\n\r\n                {activeCustomers.map((activeCustomer)=>{\r\n                    let ordetTotal = 0;\r\n                    return(\r\n                        <div key={activeCustomer.reservationId} style={{backgroundColor : 'wheat', height : 'max-contrnt', padding : '.5rem', borderRadius : '.3rem', marginBottom : '.5rem'}}>\r\n                            <div style={{display : 'flex', justifyContent : 'space-between'}}>\r\n                                <div><span>{activeCustomer.customerName}</span></div>\r\n                                <div style={{color : 'green', fontWeight : '900', cursor : 'pointer'}} onClick={()=>{markReservationCompletedAndDelete(activeCustomer.reservationId)}}>Complete Order | ₹{getOrderTotal(activeCustomer.foodOrders)}</div>\r\n                            </div>\r\n\r\n                            <div style={{display : 'flex', justifyContent : 'space-between', flexWrap : 'wrap'}}>\r\n\r\n                                <div style={{width : '100%'}}>\r\n                                    <div style={{display : 'flex', flexWrap : 'wrap'}}>\r\n                                        {activeCustomer.foodOrders.map((foodOrder)=>{\r\n                                            ordetTotal = ordetTotal + foodOrder.price;\r\n                                            return(\r\n                                                <div key={foodOrder.orderId} style={{backgroundColor : 'white', padding : '.2rem', width : 'max-content', borderRadius : '.3rem', margin : '.5rem', cursor : 'pointer'}} onClick={()=>{deleteFoodFromOrder(activeCustomer.reservationId, foodOrder.orderId)}}>\r\n                                                    {foodOrder.name}\r\n                                                </div>\r\n                                            );\r\n                                        })}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div style={{width : '100%'}}>\r\n                                    <form id={`add-order-form-${activeCustomer.reservationId}`} onSubmit={(e)=>{handleAddFoodFormSubmission(e, activeCustomer.reservationId)}}>\r\n                                        <div style={{textAlign : '-webkit-right'}}>\r\n                                            <div style={{marginTop : '.3rem', padding : '.5rem', borderRadius : '.5rem', width : 'max-content'}}>\r\n                                                <label>Order Details</label>\r\n                                                <br/>\r\n                                                <input required name=\"food\" type=\"text\"/>\r\n                                                <br/>\r\n                                                <input style={{marginTop : '.5rem'}} type=\"submit\" value=\"Add Order\"/>\r\n                                            </div>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ActiveCustomer;\r\n\r\n","import {createSlice} from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    reservations : [\r\n        { \"reservationId\": 1635389718482, \"customerName\": \"Rahul\", \"reservationDate\": \"Thu Oct 28 2021\", \"memberCount\": 2 },\r\n        { \"reservationId\": 1635389718483, \"customerName\": \"Ajay\", \"reservationDate\": \"Fri Oct 29 2021\", \"memberCount\": 5 },\r\n        { \"reservationId\": 1635389718484, \"customerName\": \"Amit\", \"reservationDate\": \"Sat Oct 30 2021\", \"memberCount\": 1 },\r\n    ]\r\n}\r\n\r\nconst reservationSlice = createSlice({\r\n    name : 'reservation',\r\n    initialState : initialState,\r\n    reducers : {\r\n        addReservation : (state, action)=>{\r\n            state.reservations.push(action.payload);\r\n        },\r\n        deleteReservation : (state, action)=>{\r\n            const filteredReservationsList = state.reservations.filter((reservation)=>reservation.reservationId !== action.payload.reservationId)\r\n            state.reservations = filteredReservationsList;\r\n        }\r\n    }\r\n});\r\n\r\n\r\n// Action Creators\r\nexport const { addReservation, deleteReservation } = reservationSlice.actions;\r\n\r\n// Reducer\r\nexport default reservationSlice.reducer;\r\n","import React, { useState } from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport { addReservation, deleteReservation } from '../../../../ReduxToolkit/Slices/reservationSlice';\r\nimport { addActiveCustomer } from '../../../../ReduxToolkit/Slices/activeCustomersSlice';\r\n\r\nconst Reservation = () => {\r\n    const dispatch = useDispatch();\r\n    const reservations = useSelector((state)=>state.reservations.reservations);\r\n\r\n\r\n    const deleteCustomerReservation = (reservationId)=>{\r\n        dispatch(deleteReservation({reservationId : reservationId}))\r\n    }\r\n\r\n    const moveCustomerToActiveCustomersList = (reservationData)=>{\r\n        dispatch(addActiveCustomer({...reservationData}));\r\n        deleteCustomerReservation(reservationData.reservationId);\r\n    }\r\n\r\n    const handleFormSubmit = (e)=>{\r\n        e.preventDefault();\r\n        const formElement = document.getElementById('reservation-form');\r\n        const formData = new FormData(formElement);\r\n        const customerName = formData.get('customerName');\r\n\r\n        const reservationData = {reservationId : Date.now(), customerName : customerName, reservationDate : new Date().toDateString(), memberCount : Math.ceil(Math.random() * 10)}\r\n        dispatch(addReservation(reservationData));\r\n        formElement.reset();\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div style={{backgroundColor : 'black', padding : '.5rem', borderRadius : '.3rem', height : '366px', overflow : 'auto'}}>\r\n                {reservations.map((reservation)=>{\r\n                    return(\r\n                        <div key={reservation.reservationId} style={{backgroundColor : 'wheat', padding : '.5rem', marginBottom : '.5rem', borderRadius : '.3rem'}}>\r\n\r\n                            <div style={{display : 'flex', justifyContent : 'space-between'}}>\r\n                                \r\n                                <div style={{cursor : 'pointer'}} onClick={()=>{moveCustomerToActiveCustomersList(reservation)}}><span>{reservation.customerName}</span></div>\r\n                                <div style={{cursor : 'pointer', color : 'red'}} onClick={()=>{deleteCustomerReservation(reservation.reservationId)}}>Delete</div>\r\n                            </div>\r\n                            <div style={{display : 'flex', justifyContent : 'space-between'}}>\r\n                                <div>{reservation.reservationDate}</div>\r\n                                <div>Members : {reservation.memberCount}</div>\r\n                            </div>\r\n\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n            \r\n                    <div style={{height : '18%', marginTop : '.3rem', padding : '.5rem', borderRadius : '.5rem', backgroundColor : 'black', color : 'white'}}>\r\n                <form id=\"reservation-form\" onSubmit={handleFormSubmit}>\r\n                        <div>\r\n                            <label>Customer Name</label>\r\n                            <br/>\r\n                            <input required name=\"customerName\" type=\"text\"/>\r\n                        </div>\r\n                        <br/>\r\n\r\n                        <div style={{textAlign : 'right'}}>\r\n                            <input type=\"submit\" value=\"Add reservation\"/>\r\n                        </div>\r\n\r\n                </form>\r\n                    </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Reservation;\r\n","import React from 'react'\r\nimport ActiveCustomer from './ActiveCustomer/ActiveCustomer';\r\nimport Reservation from './Reservation/Reservation';\r\n\r\nconst FoodCourt = () => {\r\n    return (\r\n        <div>\r\n            <h1>Plain Actions (Non-Asynchronous)</h1>\r\n        \r\n            <div style={{display : 'flex', flexWrap : 'wrap'}}>\r\n                \r\n                <div className=\"reservation-container\">\r\n                    <Reservation/>\r\n                </div>\r\n\r\n                <div className=\"active-customer-container\">\r\n                    <ActiveCustomer/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FoodCourt;\r\n","import {createSlice} from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    isLoading : false\r\n}\r\n\r\nconst loaderSlice = createSlice({\r\n    name : 'loader',\r\n    initialState : initialState,\r\n    reducers : {\r\n        startLoading : (state)=>{\r\n            state.isLoading = true;\r\n        },\r\n        stopLoading : (state)=>{\r\n            state.isLoading = false;\r\n        }\r\n    }\r\n});\r\n\r\n\r\n// Action Creators\r\nexport const { startLoading, stopLoading } = loaderSlice.actions;\r\n\r\n// Reducer\r\nexport default loaderSlice.reducer;\r\n","import {createSlice} from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    isError : false,\r\n    message : \"\",\r\n    changeId : Math.random() // This is to give unique ID when ever user dispatch any of the below actions.\r\n}\r\n\r\nconst toasterSlice = createSlice({\r\n    name : 'loader',\r\n    initialState : initialState,\r\n    reducers : {\r\n        toastErrorMessage : (state, action)=>{\r\n            state.isError = true;\r\n            state.message = action.payload;\r\n            state.changeId = Math.random();\r\n        },\r\n        toastSuccessMessage : (state, action)=>{\r\n            state.isError = false;\r\n            state.message = action.payload;\r\n            state.changeId = Math.random();\r\n        }\r\n    }\r\n});\r\n\r\n\r\n// Action Creators\r\nexport const { toastErrorMessage, toastSuccessMessage } = toasterSlice.actions;\r\n\r\n// Reducer\r\nexport default toasterSlice.reducer;\r\n","import axios from \"axios\";\r\nimport { startLoading, stopLoading } from \"../Slices/loaderSlice\";\r\nimport { toastErrorMessage, toastSuccessMessage } from \"../Slices/toasterSlice\";\r\n\r\n\r\n\r\n// Helper method to call APIs\r\nconst makeApiCall = async (requestConfig)=>{\r\n    const access_token = \"\";\r\n\r\n    const response = await axios({\r\n        baseURL: `https://jsonplaceholder.typicode.com`,\r\n        headers : { Authorization: `Bearer ${access_token}}` },\r\n        ...requestConfig,\r\n    });\r\n\r\n    console.log('AXIOS_DATA', response);\r\n    return response.data;\r\n}\r\n\r\n\r\n\r\n\r\n//                     >>>>>>>>>>>>>>>>>>>>> Signature <<<<<<<<<<<<<<<<<<<\r\n\r\n// const uiLoaderAndToastMessageConfig = {      <<<<<<<<<< If this parameter is not passed then API call will happen silently no message and loader will be displayed. In this case User have to dispatch the statrLoading and statrLoading actions from component.\r\n//     thunkAPI : thunkAPI,                     <<<<<<<<<< You will get this in second parameter of callback passed to createAsyncThunk method in SLICE file.\r\n//     message : \"Posts fetched successfully.\", <<<<<<<<< message to be displayed in toastBar, This is optional, \r\n//     displayAsError : false                   <<<<<<<<< If true message will be displayed in red color else in Green color. This is Optional, If not passed then message will be displayed in green color.\r\n// };\r\n\r\n// const requestConfig = {\r\n//     method : 'GET',\r\n//     url : URL,\r\n//     data : {}\r\n// }\r\n\r\nconst callAPI = async (requestConfig, uiLoaderAndToastMessageConfig)=>{\r\n    if(uiLoaderAndToastMessageConfig){\r\n        const {thunkAPI, displayAsError, message} = uiLoaderAndToastMessageConfig;\r\n        try{\r\n            // Make API call\r\n            thunkAPI.dispatch(startLoading());\r\n            const response = await makeApiCall(requestConfig);\r\n            thunkAPI.dispatch(stopLoading());\r\n            \r\n            // Display message\r\n            if(displayAsError && message){\r\n                thunkAPI.dispatch(toastErrorMessage(message));\r\n            } else if(message) {\r\n                thunkAPI.dispatch(toastSuccessMessage(message));\r\n            }\r\n            return response;\r\n        } catch(e) {\r\n            if(thunkAPI){\r\n                thunkAPI.dispatch(toastErrorMessage(e.message || \"Something went wrong.\"));\r\n                thunkAPI.dispatch(stopLoading());\r\n            } else {\r\n                console.error(e.message);\r\n            }\r\n        }\r\n\r\n        \r\n    } else {\r\n        try {\r\n            const response = await makeApiCall(requestConfig);\r\n            return response;\r\n        } catch(e){\r\n            console.error(e.message);\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default callAPI;","import {createSlice, createAsyncThunk} from '@reduxjs/toolkit';\r\n\r\nimport callAPI from '../API/callAPI';\r\n\r\nconst initialState = {\r\n    users : []\r\n}\r\n\r\n\r\nexport const fetchRandomUsers = createAsyncThunk( 'users/fetchRandomUsers',  async (nUsers, thunkAPI)=>{\r\n\r\n    const URL = `https://randomuser.me/api/?results=${nUsers || 1}`\r\n\r\n    const uiLoaderAndToastMessageConfig = {\r\n        thunkAPI : thunkAPI,\r\n        message : \"Users fetched successfully.\",\r\n        displayAsError : false\r\n    };\r\n\r\n    const requestConfig = {\r\n        method : 'GET',\r\n        baseURL : '',\r\n        url : URL,\r\n        data : {}\r\n    }\r\n\r\n    const response = await callAPI(requestConfig, uiLoaderAndToastMessageConfig);\r\n    return response.results;\r\n});\r\n\r\n\r\nconst usersSlice = createSlice({\r\n    name : 'users',\r\n    initialState : initialState,\r\n    reducers : {\r\n\r\n    },\r\n    extraReducers : {\r\n        [fetchRandomUsers.fulfilled] : (state, action)=>{\r\n            state.users = action.payload;\r\n        }\r\n    }\r\n})\r\n\r\n\r\n\r\n\r\nexport default usersSlice.reducer;","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {fetchRandomUsers} from '../../../ReduxToolkit/Slices/usersSlice';\r\n\r\nconst RandomUser = () => {\r\n    const dispatch = useDispatch();\r\n    const users = useSelector((state)=>state.users.users);\r\n\r\n    const [userCount, setUserCount] = useState(5);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Thunk Actions (Asynchronous)</h1>\r\n            <div style={{textAlign : 'center'}}>\r\n                <button onClick={()=>{setUserCount(userCount - 1)}}>-</button>\r\n                <button onClick={()=>{dispatch(fetchRandomUsers(userCount))}}>Fetch {userCount} User</button>\r\n                <button onClick={()=>{setUserCount(userCount + 1)}}>+</button>\r\n            </div>\r\n            <div style={{display : 'flex', flexWrap : 'wrap'}}>\r\n                {users?.map((user)=>{\r\n                    return(\r\n                        <img key={user.email} src={user.picture.large} alt={user.email} className=\"user-profile-pic\"/>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomUser;\r\n","import 'react-toastify/dist/ReactToastify.css';\r\nimport React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { toast } from 'react-toastify';\r\n\r\nconst ToastSnackBar = () => {\r\n\r\n    const toasterModel = useSelector((state)=>state.toasterModel);\r\n    const {changeId, isError, message} = toasterModel;\r\n\r\n    useEffect(()=>{\r\n        toast.dismiss();\r\n\r\n        if(message){\r\n            if(isError){\r\n                toast.error(message);\r\n            } else {\r\n                toast.success(message);\r\n            }\r\n        }\r\n    }, [isError, message, changeId]);\r\n\r\n    return (\r\n        <div>\r\n        <ToastContainer\r\n            position=\"bottom-left\"\r\n            autoClose={1800}\r\n            hideProgressBar\r\n            newestOnTop={false}\r\n            closeOnClick={false}\r\n            rtl={false}\r\n            pauseOnFocusLoss\r\n            draggable={false}\r\n            pauseOnHover\r\n            limit={1}\r\n        />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToastSnackBar;\r\n","import {createSlice, createAsyncThunk, findNonSerializableValue} from '@reduxjs/toolkit';\r\nimport callAPI from '../API/callAPI';\r\n\r\n\r\nconst initialState = {\r\n    posts : [],\r\n    selectedPost : {}\r\n}\r\n\r\nexport const fetchAllPosts = createAsyncThunk('posts/fetchAllPosts', async (data, thunkAPI)=>{\r\n\r\n    const URL = `/posts`\r\n\r\n    const uiLoaderAndToastMessageConfig = {\r\n        thunkAPI : thunkAPI,\r\n        message : \"Posts fetched successfully.\",\r\n        displayAsError : false\r\n    };\r\n\r\n    const requestConfig = {\r\n        method : 'GET',\r\n        url : URL,\r\n        data : {}\r\n    }\r\n\r\n    const response = await callAPI(requestConfig, uiLoaderAndToastMessageConfig);\r\n\r\n    return response;\r\n})\r\n\r\nexport const updatePost = createAsyncThunk('posts/updatePost', async (data, thunkAPI)=>{\r\n    \r\n\r\n    const URL = `/posts/${data.id}`\r\n\r\n    const uiLoaderAndToastMessageConfig = {\r\n        thunkAPI : thunkAPI,\r\n        message : \"Posts updated successfully.\",\r\n        displayAsError : false\r\n    };\r\n\r\n    const requestConfig = {\r\n        method : 'PUT',\r\n        url : URL,\r\n        data : data\r\n    }\r\n\r\n    const response = await callAPI(requestConfig, uiLoaderAndToastMessageConfig);\r\n\r\n    return response;\r\n})\r\n\r\n\r\nconst postsSlice = createSlice({\r\n    name : 'posts',\r\n    initialState : initialState,\r\n    reducers : {\r\n        updateSelectedPost : (state, action)=>{\r\n            state.selectedPost = action.payload;\r\n        }\r\n    },\r\n    extraReducers : {\r\n        [fetchAllPosts.fulfilled] : (state, action)=>{\r\n            state.posts = action.payload\r\n        },\r\n        [updatePost.fulfilled] : (state, action)=>{\r\n            const updatedPosts = [];\r\n            state.posts.forEach((post)=>{\r\n                if(post.id === action.payload.id){\r\n                    updatedPosts.push(action.payload)\r\n                } else {\r\n                    updatedPosts.push(post)\r\n                }\r\n            })\r\n\r\n            state.posts = updatedPosts;\r\n        }\r\n    }\r\n})\r\n\r\nexport const {updateSelectedPost} = postsSlice.actions;\r\n\r\nexport default postsSlice.reducer;","import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst EditPostModal = (props) => {\r\n    const {onClose, onSave} = props;\r\n\r\n    const post = useSelector((state)=>state?.postsModel?.selectedPost);\r\n\r\n    const [title,setTitle] = useState(\"\");\r\n    const [body,setBody] = useState(\"\");\r\n\r\n    useEffect(()=>{\r\n        setTitle(post.title);\r\n        setBody(post.body);\r\n    },[])\r\n\r\n    console.log(post);\r\n\r\n    const handleFormSubmission =(e)=>{\r\n        e.preventDefault();\r\n        const form = document.getElementById('edit-post-form');\r\n        const formData = new FormData(form);\r\n\r\n        const title = formData.get('title');\r\n        const body = formData.get('body');\r\n\r\n        onSave({...post, title, body});\r\n    }\r\n\r\n    return (\r\n        <div style={{position : 'fixed', top : '0', bottom : '0', right : '0', left : '0', display : 'flex', justifyContent : 'center', alignItems : 'center', backgroundColor : 'rgba(70,70,70,.7)'}}>\r\n            <div className=\"edit-post-modal-content\">\r\n                <form id=\"edit-post-form\" onSubmit={handleFormSubmission}>\r\n                    <div>\r\n                        <label>Title</label>\r\n                        <br/>\r\n                        <input required type=\"text\" name=\"title\" onChange={(e)=>{setTitle(e.target.value)}} value={title}/>\r\n                    </div>\r\n                    \r\n                    <br/>\r\n\r\n                    <div>\r\n                        <label>Body</label>\r\n                        <br/>\r\n                        <input required type=\"text\" name=\"body\" onChange={(e)=>{setBody(e.target.value)}} value={body}/>\r\n                    </div>\r\n\r\n                    <br/>\r\n\r\n                    <div style={{display : 'flex', justifyContent : 'space-between'}}>\r\n                        <button onClick={onClose}>Close</button>\r\n                        <button type=\"submit\" >Save</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditPostModal;\r\n","import React from 'react'\r\n\r\nconst Post = (props) => {\r\n    const {title, body} = props;\r\n\r\n    return (\r\n        <div className=\"post-card-container\">\r\n            <div>\r\n                <b>{title}</b>\r\n            </div>\r\n            <div>\r\n                <p>{body}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;\r\n","import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchAllPosts } from '../../../ReduxToolkit/Slices/postsSlice';\r\nimport EditPostModal from './EditPostModal';\r\nimport Post from './Post';\r\nimport { updateSelectedPost, updatePost } from '../../../ReduxToolkit/Slices/postsSlice';\r\n\r\n// fetchAllPosts\r\n\r\nconst Posts = () => {\r\n    const dispatch = useDispatch();\r\n    const posts = useSelector((state)=>state?.postsModel?.posts);\r\n    console.log('InComponent', posts);\r\n\r\n    const [openEditPostModal, setOpenEditPostModal] = useState(false);\r\n\r\n    const fetchPosts = ()=>{\r\n        dispatch(fetchAllPosts());\r\n    }\r\n\r\n    const handlePostClick=(postData)=>{\r\n        dispatch(updateSelectedPost(postData));\r\n        console.log(postData);\r\n        setOpenEditPostModal(true);\r\n    }\r\n\r\n    const closeEditModal=()=>{\r\n        setOpenEditPostModal(false);\r\n    }\r\n\r\n    const savePostData=(data)=>{\r\n        console.log(data);\r\n        dispatch(updatePost(data));\r\n        closeEditModal();\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div style={{textAlign : 'center', marginTop : '4rem', paddingTop : '1rem', borderTop : '1px solid black' }}>\r\n                <button onClick={fetchPosts}>Fetch Posts</button>\r\n            </div>\r\n\r\n            <div style={{display : 'flex', justifyContent : 'space-evenly', flexWrap : 'wrap'}}>\r\n                {posts?.map((post)=>{\r\n                        return(\r\n                            <div key={post.id} onClick={()=>{handlePostClick(post)}}>\r\n                                <Post title={post.title} body={post.body}/>\r\n                            </div>\r\n                        );\r\n                    })\r\n\r\n                }\r\n            </div>\r\n\r\n\r\n            {openEditPostModal && \r\n                <EditPostModal\r\n                    onClose={()=>{closeEditModal()}}\r\n                    onSave={(data)=>{savePostData(data)}}\r\n                />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Posts;\r\n","import './App.css';\nimport LoaderReduxToolkit from './Components/ReduxTollKitComponents/LoaderReduxToolkit/LoaderReduxToolkit';\nimport FoodCourt from './Components/ReduxTollKitComponents/FoodCourt/FoodCourt';\nimport RandomUser from './Components/ReduxTollKitComponents/RandomUser/RandomUser';\nimport ToastSnackBar from './Components/ReduxTollKitComponents/ToastSnackBar/ToastSnackBar';\nimport Posts from './Components/ReduxTollKitComponents/Posts/Posts';\n\nfunction AppReduxToolkit() {\n  return (\n    <div>\n      <ToastSnackBar/>\n      <LoaderReduxToolkit/>\n      <FoodCourt/>\n      <RandomUser/>\n      <Posts/>\n    </div>\n  );\n}\n\nexport default AppReduxToolkit;\n","import {configureStore} from '@reduxjs/toolkit';\r\nimport reservationReducer from './Slices/reservationSlice';\r\nimport activeCustomersReducer from './Slices/activeCustomersSlice';\r\nimport usersReducer from './Slices/usersSlice';\r\nimport loaderReducer from './Slices/loaderSlice';\r\nimport toasterReducer from './Slices/toasterSlice';\r\nimport postsReducer from './Slices/postsSlice';\r\n\r\nconst store = configureStore({\r\n    reducer : {\r\n        reservations : reservationReducer,\r\n        activeCustomers : activeCustomersReducer,\r\n        users : usersReducer,\r\n        loaderModel : loaderReducer,\r\n        toasterModel : toasterReducer,\r\n        postsModel : postsReducer\r\n    }\r\n});\r\n\r\nconsole.log('STORE', store);\r\n\r\nexport const {dispatch} = store;\r\n\r\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import AppPlainRedux from \"./AppPlainRedux\";\nimport AppReduxToolkit from \"./AppReduxToolkit\";\nimport { Provider } from \"react-redux\";\n\n// import store from \"./Redux/store\"; // store from plain react-redux\nimport store from \"./ReduxToolkit/store\"; // store from redux toolkit\n\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    {/* <AppPlainRedux /> */}\n    <AppReduxToolkit/>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}